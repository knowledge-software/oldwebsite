#pragma	once#include	<setjmp.h>#define nil	0L#define	kTupStackSize	200//#include	<vector>//// This is the calculatior object that translates a calculational string into a result.//class	Calculator	{	public:		// We instantiate with an arbitrary string of a calculated result.		Calculator( char* inString, bool EuropeanStandard=false );								// Build Execution		void	Execute( char* theResult=nil );		// Get the Answer		void	Answer( char* theResult );						// Debug Function		void	DumpTuples();		// Parser errors		enum	{			noErr,			expresionErr,			overFlowErr			};	protected:		Tuple	tupArray[kTupStackSize];		Tuple	tupStack[kTupStackSize];		Tuple	lookAhead;		short	inputStreamIndex;		short	stackIndex;		char	errorMsg[256];		jmp_buf env;		bool	europeanStandard;	private:		// For exposure only, intended as a private function.		char*	lexical( char* in, char* tokStr );		void	tokens( char* in );				void	parse();		Tuple&	lexan();		void	expr();		void	term();		void	factor();		void	value();		void	match( unsigned short t );		void	match( Tuple t )			{ match( t.theType() ); }		void	emit( Tuple t );		void	error( char* s );		void	checkStack();		Tuple	result();};