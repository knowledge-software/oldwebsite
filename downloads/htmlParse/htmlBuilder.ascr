(*	While this file doesn't explicitly parse HTML it shows how to extract tags from	a text file.  This program looks for meta tags of the form [wb-CCCC.iii] where CCCC is	the class and iii is the instance or field.  This could just as easily generate a list of	tags and their internals.  Since this program operates on a file of our own design we	can be sure that it is small enough (<32k ) to be ingested all at once.*)----property gTemplateFile : "htmlTemplate.html" -- name of the template fileproperty gDestinationFolder : "" -- name of the destination folder (web server location)(********** UTILITIES ***********************)----	Get a path to this applet or scripton pathToThisScript()	set p2m to path to me	tell application "Finder"		return the container of p2m	end tellend pathToThisScript---- Make dated filenameon makeDatedFileName(prefix)	-- this uses my private osax but you can do your own thing here.	return prefix & (strftime "%m-%d-%y_%H-%M") & ".html"end makeDatedFileName---- This extracts a file reference from a stored value.on getTemplateFile()	try		tell application "Finder"			--			-- I want the original if it is an alias.			try				return original item of file gTemplateFile of my pathToThisScript()			on error				return file gTemplateFile of my pathToThisScript()			end try		end tell	on error		error "There is no " & gTemplateFile & " to read." number -43	end tryend getTemplateFile---- Get a reference to the destination folder.on resultFolder()	try		tell application "Finder"			return original item of file gDestinationFolder of my pathToThisScript()		end tell	on error		error "There is no " & gDestinationFolder & " to save data." number -43	end tryend resultFolder(********** UTILITIES ***********************)(********** HTML Interpretation and generatation ***********************)----  Get the template file.  The file is small so I eat the "whole" thing--on spoolInTemplateFile(f)	set tags to ""	open for access f	set fRef to the result	try		read fRef using delimiter {"[", "]"} as list		set tags to the result	on error	end try	close access fRef	return tags -- I can't believe I ate the whole thing!end spoolInTemplateFile----  Build the final html result table.on expelResultsToFile(outputValues)	set fileName to makeDatedFileName("wthr")	set destFolder to resultFolder() as text	tell application "Finder"		set atThisPath to (destFolder & fileName)		try			open for access the file atThisPath with write permission			--	make new file at location of destFolder --with properties {name: fileName} 			write (outputValues as text) to the file atThisPath starting at 0			close access the file atThisPath					on error m			--display dialog m			close access the file atThisPath		end try		return file atThisPath	end tell	end expelResultsToFile(********** HTML Interpretation and generatation ***********************)---- Make sure our data acquisitiong program is running.on startDataApplication()	-- dummy stub to start whatever program we need to get some dataend startDataApplication---- Quit our data acquisition program--on quitDataApplication()	-- dummy stub to stop whatever program we need to get some dataend quitDataApplication------on substituteTagData(v)	-- v contains a tag, we have a series of tests to return 	-- the value to substitute for the tag	if v contains "timestamp" then		return (current date) as string	end if	(** Other examples...   Notice that the tags consist of dotted pairs after the flag tag i.e. "wb-" then 'frame.spec'	if v contains "archive" then		-- note that date requests are handled befor value requests.		if v contains "HiWindDate" then			return "some other date"		end if		if v contains "HiWind" then			return hiWind of last8Hours		end if		if v contains "HiTempDate" then			return strftime "%A, %H:%M" arguments hiOutTempDate of last8Hours		end if		if v contains "HiTemp" then			return hiOutTemp of last8Hours		end if		if v contains "LoTempDate" then			return strftime "%A, %H:%M" arguments loOutTempDate of last8Hours		end if		if v contains "LoTemp" then			return loOutTemp of last8Hours		end if		if v contains "RainFall" then			return rainFall of last8Hours		end if		if v contains "Interval" then			return (interval of last8Hours) as integer --( sprintf "%ld" arguments (interval of last8Hours))		end if	end if*)	end substituteTagData---- This substitutes data for our special 'meta' tags that leaves all the HTML data intact.on substituteDataForTags(tagsList)	repeat with i from 1 to the length of tagsList		if item i of tagsList starts with "wb-" then			set item i of tagsList to substituteTagData(item i of tagsList)		end if	end repeat	return tagsListend substituteDataForTags---- Nity gritty...Do the work.--on run {}	startDataApplication()		--	-- Eat the whole template file (it is small enough	set inputValues to Â		spoolInTemplateFile(getTemplateFile())	--	-- Substitute data for the meta tags.	set outputValues to Â		substituteDataForTags(inputValues)	--	-- Spit it back out to a new file.	set atThisPath to expelResultsToFile(outputValues)		--	-- Move the results to our destination	tell application "Finder"		set destFolder to container of atThisPath		try			move (file "currentWeather.html" of destFolder) to trash		on error		end try		-- this gimicky but needed under MacOS 8.1		duplicate atThisPath		set the name of the result to "currentWeather.html"	end tell		quitDataApplication()end run