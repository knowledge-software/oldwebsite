             hp48   variable editor and control stack                     a shareware product brought to you by:            Paul B. Beeken            Knowledge Software Consulting            1204 Hall Ave.            White Plains, NY 10604             knowsoft@ios.comThis is an extraction of the documentation found within the hypercard stack itself.I offer this stack with the usual shareware caveats and pleadings: Try it. It works well for what it is supposed to do. If you like it, please, please, send $10 as a token of your appreciation and esteem. Do not include this as part of any commercial package without contacting  me first.  I spent a lot of hours polishing this so others might find utility in this tool.  Thank you in advance for your honesty and consideration.¥IntroductionThis stack contains a rudimentary kernit xcmd which allows it to  communicate with a hp48s,sx,g, and gx calculator. The protocall is probably robust enough to talk to other calculators as well but since I haven't any of these other machines I can't be sure. In any case, this stack is optimized for use with the hp48 family of calculators.  It will allow the user to communicate to the calculator, edit variable objects, and control it's operation from the computer. Most of the commands require that the cacluator be set up as a server. This allows the computer to control and set the states of the calculator without any further intervention. The main draw back to this is that the power consumption of the calculator is increased because the serial port must remain open for long periods. If all you wish to do is edit a few  variable objects then the SEND and RECV commands can work in local-local mode as well. To place the calculator in server mode use the A I/O SERVER key sequence or the B I/O key sequence.  Once in the server mode, the calculator can be controlled from the computer. The basic operations are described below.  Operations which require the calculator to act as a server are annotated with a D  mark. Those that work with the calculator in a local-local context are indicated with a E mark.¥I/O SetupThe general configuration for the communication port is fixed (although with enough encouragement I could make it more flexible) and kept close to the cacluator's default configuration:  9600baud, noParity, 8bit communication. Obviously the IR/W switch needs to be set to "wire" and because we are displaying the data we use ASCII transfers.  The kermit protocall can handle any checksum type and the translate code should be set to 1. hp should have provided for a no translate option. The edit fields in hypercard are perfectly comfortable with ascii 10 as a line terminator.  I had to build a special filter to strip the ascii 13 out. To summarize:IR/Wire:              wireASCII/binary:         ASCIIbaud:                 9600parity:               none 0checksum type:        3 (or 2 or 1)translate code:       1¥LisitngThis card will display a list of all the saved hp objects in the stack. The marked cards are delineated with a little arrow at the left. Click on a name to go to that card. Click on the name with the option or command key down to toggle the mark or the card. The print button will print the marked cards in the stack in one of two formats. The long format will print two cards per page side by side. The wide format will print one or two cards per page in a two column format.¥Directory    DThis card will obtain a directory of the current path level of an attached calculator in server mode. Simply clicking on the Dir results in a summary display of the VAR table for the current path.  The current path is then placed in the field above the directory. If the path field is modified to reflect another path and the shift key is held down while clicking the dir button  the default path will be changed and the VAR table for that path is displayed.¥Commands    DCommands can be issued to a calculator in server mode. By typing any calculator command sequence into the header field and clicking the command key you can issue an instruction to the calculator. The resulting stack display is then presented in the field below.¥Edit Variables    D &  EAny  variable in the current path can be sent or recieved to these cards. New cards can be made to hold different varaibles. Any variable or object which can be edited can be displayed, altered and returned to the calculator from these cards.   -SEND / RECVHow the variables are communicated with the caclulator depends to some degree on the mode of the calculator:  -Server mode   DIf the calculator is in server mode click in the screen portion of the Calc. icon in the lower right corner until an S appears in the screen. Type the name of the variable you wish to receive or transmit in the header field above the edit field. Click on the appropriate button ( SEND or RECV ) to exchange the variable's contents.  -Local mode   EIf the calculator is in local mode then what you do next depends on whether you are receiving or sending a variable:SENDing: be sure the name of the transmitted name is the desired one in the header field. Issue the A I/O RECV command. Click on the SEND button to transmit the variable's contents to the calculator. If flag -36 is set and the name is the same as an existing variable, its contents wil be overwritten.  If flag -36 is not set then the modified variable name will appear in the header field. RECVing: the contents of the header field are ignored. Select the variable to be send from the calculator.  Click on the RECV button. Issue the A I/O SEND command from the calculator.Note about multiple RECV/SEND: This situation occurs most frequently using the 48G / GX models although the 48S / SX can do this as well. By enclosing a number of hp objects in brackets e.g. { A B C }  you can transmit a sequence of objects as separate files.  I choose to keep these objects together on a single card. This is very convenient if you have a number of small variables within a directory. The RECV function will tag each object with a comment field to help identify them. SEND will likewise transmit the indiviual components. WARNING The SEND function does not attempt to parse the comment fields. The filenames used for transmission are assumed to be the same order as they appear in the brackets of the title field.Though the local-local mode is slightly  more complex, the resulting drain on the calculator batteries is less. After the variable is transfered you may close the port and shut off the calculator while you edit the variable.  -EditingThis operates like any other edit field. Simply type away. Clicking on the keypad portion of the calculator icon will toggle the display of a field full of the special characters used by the calculator. To insert any of these special characters, select where you want them to go and click on them. They will replace the last insertion point in the edit field.   -New CardYou can create new cards to be able to work on and keep different variables around.  -GROBThis executes the GROBdisplay handler described below. It attempts to find a GROB object in your edit field and sends it to the GROBdisplay handler. If there are more than one GROB in your edit field subsequent clicks find successive occurances of the objects.¥GROB DisplayThis is a real hyperscript kludge. This handler should really be another XCMD but I don't need this function much so I am content with this implementation. The GROB display handler takes a chunk of some field of the form "GROB n m hs" and attempts to render the bit map in the upper left corner of the screen. The hexstring, hs, is displayed in an edit field in the lower right. The line wdth of the field reflects the actual width of the bitmap display. For example, if the bitmap is 20 pixels wide then there must be 5 hex characters needed to display a line so the edit field is adjusted to display 5 characters per line.If you need to blow the bitmap up by a factor of 2 then click on the  Scale button. Holding the shift key down reduces it by 2. This feature is far from perfect, it is a simple stopgap. Clicking anywhere on the bitmap image itself will re-render the GROB displayed in the edit field.If you have an application called GROBer (which came with your cable) then you can launch it and read the text files exported fron this card. Exporting and importing should be self explanitory.¥Revision Historyv 1.0 - Initial release of this marvelous little toolbox.v 1.5 - Modification of Kermit SEND/RECV buttons and code to handle multiple               Object transmission. i.e: { A B C } ala hp48G/X¥Known BugsCome on. It's perfect. NOT!Sometimes, for reasons that are not always clear, the a kermit command packet will cause the session to abort prematurely (usually a gentle beep results). The computer will disconnect before the calculator is through sending it's information.  Simply abort the calculator's operation by pressing the ATTN key and retry.Kermit RECV in server mode will fail occasionally in a similar way. If the variable being transfered is very large and the calculator is in server mode the computer will some times close the session before the information is transferred.The work around is to do the transfer in local-local mode. This hasn't failed me yet.  This bug is mysterious since, as you might imagine, I call the same subroutine for both modes of operation. One times out while the other doesn't.